// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  nameEn      String?  // For Arabic users with English names
  role        Role     @default(CLIENT)
  avatar      String?
  joinedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  cartItems   CartItem[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  nameEn      String?   // English translation
  nameAr      String?   // Arabic translation
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  nameEn      String?  // English translation
  nameAr      String?  // Arabic translation
  price       Float
  description String
  descriptionEn String? // English translation
  descriptionAr String? // Arabic translation
  image       String
  images      String[] // Additional images
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  categoryId  String?   // Made optional to allow uncategorized products
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Human readable order number like ORD-001
  total           Float
  status          OrderStatus @default(PENDING)
  customerName    String
  customerEmail   String
  shippingAddress String
  phoneNumber     String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float    // Price at time of order
  createdAt DateTime @default(now())
  
  // Relations
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}
